/// This file was generated automatically by the codegen crate.
/// Do not edit it manually.
///
/// See build.rs for wrausmt or the included codegen crate for more details.
use crate::instructions::InstructionData;
use crate::instructions::{Opcode, Operands, BAD_INSTRUCTION};
pub static INSTRUCTION_DATA: &[InstructionData] = &[
    InstructionData {
        opcode:   Opcode::Normal(0x0),
        name:     "unreachable",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x1),
        name:     "nop",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x2),
        name:     "block",
        operands: Operands::Block,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x3),
        name:     "loop",
        operands: Operands::Loop,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x4),
        name:     "if",
        operands: Operands::If,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x5),
        name:     "else",
        operands: Operands::None,
    },
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    InstructionData {
        opcode:   Opcode::Normal(0xb),
        name:     "end",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0xc),
        name:     "br",
        operands: Operands::Br,
    },
    InstructionData {
        opcode:   Opcode::Normal(0xd),
        name:     "br_if",
        operands: Operands::Br,
    },
    InstructionData {
        opcode:   Opcode::Normal(0xe),
        name:     "br_table",
        operands: Operands::BrTable,
    },
    InstructionData {
        opcode:   Opcode::Normal(0xf),
        name:     "return",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x10),
        name:     "call",
        operands: Operands::FuncIndex,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x11),
        name:     "call_indirect",
        operands: Operands::CallIndirect,
    },
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    InstructionData {
        opcode:   Opcode::Normal(0x1a),
        name:     "drop",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x1b),
        name:     "select",
        operands: Operands::Select,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x1c),
        name:     "selectt",
        operands: Operands::SelectT,
    },
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    InstructionData {
        opcode:   Opcode::Normal(0x20),
        name:     "local.get",
        operands: Operands::LocalIndex,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x21),
        name:     "local.set",
        operands: Operands::LocalIndex,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x22),
        name:     "local.tee",
        operands: Operands::LocalIndex,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x23),
        name:     "global.get",
        operands: Operands::GlobalIndex,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x24),
        name:     "global.set",
        operands: Operands::GlobalIndex,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x25),
        name:     "table.get",
        operands: Operands::TableIndex,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x26),
        name:     "table.set",
        operands: Operands::TableIndex,
    },
    BAD_INSTRUCTION,
    InstructionData {
        opcode:   Opcode::Normal(0x28),
        name:     "i32.load",
        operands: Operands::Memargs,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x29),
        name:     "i64.load",
        operands: Operands::Memargs,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x2a),
        name:     "f32.load",
        operands: Operands::Memargs,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x2b),
        name:     "f64.load",
        operands: Operands::Memargs,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x2c),
        name:     "i32.load8_s",
        operands: Operands::Memargs,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x2d),
        name:     "i32.load8_u",
        operands: Operands::Memargs,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x2e),
        name:     "i32.load16_s",
        operands: Operands::Memargs,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x2f),
        name:     "i32.load16_u",
        operands: Operands::Memargs,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x30),
        name:     "i64.load8_s",
        operands: Operands::Memargs,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x31),
        name:     "i64.load8_u",
        operands: Operands::Memargs,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x32),
        name:     "i64.load16_s",
        operands: Operands::Memargs,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x33),
        name:     "i64.load16_u",
        operands: Operands::Memargs,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x34),
        name:     "i64.load32_s",
        operands: Operands::Memargs,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x35),
        name:     "i64.load32_u",
        operands: Operands::Memargs,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x36),
        name:     "i32.store",
        operands: Operands::Memargs,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x37),
        name:     "i64.store",
        operands: Operands::Memargs,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x38),
        name:     "f32.store",
        operands: Operands::Memargs,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x39),
        name:     "f64.store",
        operands: Operands::Memargs,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x3a),
        name:     "i32.store8",
        operands: Operands::Memargs,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x3b),
        name:     "i32.store16",
        operands: Operands::Memargs,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x3c),
        name:     "i64.store8",
        operands: Operands::Memargs,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x3d),
        name:     "i64.store16",
        operands: Operands::Memargs,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x3e),
        name:     "i64.store32",
        operands: Operands::Memargs,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x3f),
        name:     "memory.size",
        operands: Operands::MemorySize,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x40),
        name:     "memory.grow",
        operands: Operands::MemoryGrow,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x41),
        name:     "i32.const",
        operands: Operands::I32,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x42),
        name:     "i64.const",
        operands: Operands::I64,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x43),
        name:     "f32.const",
        operands: Operands::F32,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x44),
        name:     "f64.const",
        operands: Operands::F64,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x45),
        name:     "i32.eqz",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x46),
        name:     "i32.eq",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x47),
        name:     "i32.ne",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x48),
        name:     "i32.lt_s",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x49),
        name:     "i32.lt_u",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x4a),
        name:     "i32.gt_s",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x4b),
        name:     "i32.gt_u",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x4c),
        name:     "i32.le_s",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x4d),
        name:     "i32.le_u",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x4e),
        name:     "i32.ge_s",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x4f),
        name:     "i32.ge_u",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x50),
        name:     "i64.eqz",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x51),
        name:     "i64.eq",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x52),
        name:     "i64.ne",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x53),
        name:     "i64.lt_s",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x54),
        name:     "i64.lt_u",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x55),
        name:     "i64.gt_s",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x56),
        name:     "i64.gt_u",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x57),
        name:     "i64.le_s",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x58),
        name:     "i64.le_u",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x59),
        name:     "i64.ge_s",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x5a),
        name:     "i64.ge_u",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x5b),
        name:     "f32.eq",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x5c),
        name:     "f32.ne",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x5d),
        name:     "f32.lt",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x5e),
        name:     "f32.gt",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x5f),
        name:     "f32.le",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x60),
        name:     "f32.ge",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x61),
        name:     "f64.eq",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x62),
        name:     "f64.ne",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x63),
        name:     "f64.lt",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x64),
        name:     "f64.gt",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x65),
        name:     "f64.le",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x66),
        name:     "f64.ge",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x67),
        name:     "i32.clz",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x68),
        name:     "i32.ctz",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x69),
        name:     "i32.popcnt",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x6a),
        name:     "i32.add",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x6b),
        name:     "i32.sub",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x6c),
        name:     "i32.mul",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x6d),
        name:     "i32.div_s",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x6e),
        name:     "i32.div_u",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x6f),
        name:     "i32.rem_s",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x70),
        name:     "i32.rem_u",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x71),
        name:     "i32.and",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x72),
        name:     "i32.or",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x73),
        name:     "i32.xor",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x74),
        name:     "i32.shl",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x75),
        name:     "i32.shr_s",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x76),
        name:     "i32.shr_u",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x77),
        name:     "i32.rotl",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x78),
        name:     "i32.rotr",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x79),
        name:     "i64.clz",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x7a),
        name:     "i64.ctz",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x7b),
        name:     "i64.popcnt",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x7c),
        name:     "i64.add",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x7d),
        name:     "i64.sub",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x7e),
        name:     "i64.mul",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x7f),
        name:     "i64.div_s",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x80),
        name:     "i64.div_u",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x81),
        name:     "i64.rem_s",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x82),
        name:     "i64.rem_u",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x83),
        name:     "i64.and",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x84),
        name:     "i64.or",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x85),
        name:     "i64.xor",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x86),
        name:     "i64.shl",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x87),
        name:     "i64.shr_s",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x88),
        name:     "i64.shr_u",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x89),
        name:     "i64.rotl",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x8a),
        name:     "i64.rotr",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x8b),
        name:     "f32.abs",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x8c),
        name:     "f32.neg",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x8d),
        name:     "f32.ceil",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x8e),
        name:     "f32.floor",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x8f),
        name:     "f32.trunc",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x90),
        name:     "f32.nearest",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x91),
        name:     "f32.sqrt",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x92),
        name:     "f32.add",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x93),
        name:     "f32.sub",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x94),
        name:     "f32.mul",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x95),
        name:     "f32.div",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x96),
        name:     "f32.min",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x97),
        name:     "f32.max",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x98),
        name:     "f32.copysign",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x99),
        name:     "f64.abs",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x9a),
        name:     "f64.neg",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x9b),
        name:     "f64.ceil",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x9c),
        name:     "f64.floor",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x9d),
        name:     "f64.trunc",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x9e),
        name:     "f64.nearest",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0x9f),
        name:     "f64.sqrt",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0xa0),
        name:     "f64.add",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0xa1),
        name:     "f64.sub",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0xa2),
        name:     "f64.mul",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0xa3),
        name:     "f64.div",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0xa4),
        name:     "f64.min",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0xa5),
        name:     "f64.max",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0xa6),
        name:     "f64.copysign",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0xa7),
        name:     "i32.wrap_i64",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0xa8),
        name:     "i32.trunc_f32_s",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0xa9),
        name:     "i32.trunc_f32_u",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0xaa),
        name:     "i32.trunc_f64_s",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0xab),
        name:     "i32.trunc_f64_u",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0xac),
        name:     "i64.extend_i32_s",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0xad),
        name:     "i64.extend_i32_u",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0xae),
        name:     "i64.trunc_f32_s",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0xaf),
        name:     "i64.trunc_f32_u",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0xb0),
        name:     "i64.trunc_f64_s",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0xb1),
        name:     "i64.trunc_f64_u",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0xb2),
        name:     "f32.convert_i32_s",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0xb3),
        name:     "f32.convert_i32_u",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0xb4),
        name:     "f32.convert_i64_s",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0xb5),
        name:     "f32.convert_i64_u",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0xb6),
        name:     "f32.demote_f64",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0xb7),
        name:     "f64.convert_i32_s",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0xb8),
        name:     "f64.convert_i32_u",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0xb9),
        name:     "f64.convert_i64_s",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0xba),
        name:     "f64.convert_i64_u",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0xbb),
        name:     "f64.promote_f32",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0xbc),
        name:     "i32.reinterpret_f32",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0xbd),
        name:     "i64.reinterpret_f64",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0xbe),
        name:     "f32.reinterpret_i32",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0xbf),
        name:     "f64.reinterpret_i64",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0xc0),
        name:     "i32.extend8_s",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0xc1),
        name:     "i32.extend16_s",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0xc2),
        name:     "i64.extend8_s",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0xc3),
        name:     "i64.extend16_s",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0xc4),
        name:     "i64.extend32_s",
        operands: Operands::None,
    },
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    InstructionData {
        opcode:   Opcode::Normal(0xd0),
        name:     "ref.null",
        operands: Operands::HeapType,
    },
    InstructionData {
        opcode:   Opcode::Normal(0xd1),
        name:     "ref.is_null",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Normal(0xd2),
        name:     "ref.func",
        operands: Operands::FuncIndex,
    },
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
];
pub static EXTENDED_INSTRUCTION_DATA: &[InstructionData] = &[
    InstructionData {
        opcode:   Opcode::Extended(0x0),
        name:     "i32.trunc_sat_f32_s",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Extended(0x1),
        name:     "i32.trunc_sat_f32_u",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Extended(0x2),
        name:     "i32.trunc_sat_f64_s",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Extended(0x3),
        name:     "i32.trunc_sat_f64_u",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Extended(0x4),
        name:     "i64.trunc_sat_f32_s",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Extended(0x5),
        name:     "i64.trunc_sat_f32_u",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Extended(0x6),
        name:     "i64.trunc_sat_f64_s",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Extended(0x7),
        name:     "i64.trunc_sat_f64_u",
        operands: Operands::None,
    },
    InstructionData {
        opcode:   Opcode::Extended(0x8),
        name:     "memory.init",
        operands: Operands::MemoryInit,
    },
    InstructionData {
        opcode:   Opcode::Extended(0x9),
        name:     "data.drop",
        operands: Operands::DataIndex,
    },
    InstructionData {
        opcode:   Opcode::Extended(0xa),
        name:     "memory.copy",
        operands: Operands::MemoryCopy,
    },
    InstructionData {
        opcode:   Opcode::Extended(0xb),
        name:     "memory.fill",
        operands: Operands::MemoryFill,
    },
    InstructionData {
        opcode:   Opcode::Extended(0xc),
        name:     "table.init",
        operands: Operands::TableInit,
    },
    InstructionData {
        opcode:   Opcode::Extended(0xd),
        name:     "elem.drop",
        operands: Operands::ElemIndex,
    },
    InstructionData {
        opcode:   Opcode::Extended(0xe),
        name:     "table.copy",
        operands: Operands::TableCopy,
    },
    InstructionData {
        opcode:   Opcode::Extended(0xf),
        name:     "table.grow",
        operands: Operands::TableIndex,
    },
    InstructionData {
        opcode:   Opcode::Extended(0x10),
        name:     "table.size",
        operands: Operands::TableIndex,
    },
    InstructionData {
        opcode:   Opcode::Extended(0x11),
        name:     "table.fill",
        operands: Operands::TableIndex,
    },
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
];
pub static SIMD_INSTRUCTION_DATA: &[InstructionData] = &[
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
    BAD_INSTRUCTION,
];
