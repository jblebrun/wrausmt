0x01      ,nop                           ,()
0x02      ,block                         ,(Block)
0x03      ,loop                          ,(Block)
0x04      ,if                            ,(Block)
0x05      ,else                          ,()
0x0B      ,end                           ,()
| // eventually pop label
| Ok(())

0x0C      ,br                            ,(Br)
0x0D      ,br_if                         ,(Br)
0x0E      ,br_table                      ,(BrTable)
0x0F      ,return                        ,()
| // eventually do returny things
| Ok(())

0x10      ,call                          ,(Call)
| let i = _ec.op_u32()?;
| _ec.call(i)

0x11      ,call_indirect                 ,(CallIndirect)
0x1A      ,drop                          ,()
0x1B      ,select                        ,()
0x1C      ,selectt                       ,(SelectT)
0xD0      ,ref.null                      ,(HeapType)
0xD1      ,ref.is_null                   ,()
0xD2      ,ref.func                      ,(FuncIndex)

0x20      ,local.get                     ,(LocalIndex)
| let i = _ec.op_u32()?;
| let v = _ec.get_local(i)?;
| _ec.push_value(v)

0x21      ,local.set                     ,(LocalIndex)
| let i = _ec.op_u32()?;
| let v = _ec.pop_value()?;
| _ec.set_local(i, v)

0x22      ,local.tee                     ,(LocalIndex)
0x23      ,global.get                    ,(GlobalIndex)
| let i = _ec.op_u32()?;
| let v = _ec.get_global(i)?;
| _ec.push_value(v)

0x24      ,global.set                    ,(GlobalIndex)
0x25      ,table.get                     ,(TableIndex)
0x26      ,table.set                     ,(TableIndex)
0x28      ,i32.load                      ,(Memargs)
| let v = _ec.get_mem_i32()?;
| _ec.push(v)

0x29      ,i64.load                      ,(Memargs)
| let v = _ec.get_mem_i64()?;
| _ec.push(v)

0x2a      ,f32.load                      ,(Memargs)
| let v = _ec.get_mem_f32()?;
| _ec.push(v)

0x2b      ,f64.load                      ,(Memargs)
| let v = _ec.get_mem_f64()?;
| _ec.push(v)

0x2c      ,i32.load8_s                   ,(Memargs)
| let v = _ec.get_mem_i32_8s()?;
| _ec.push(v as i32)

0x2d      ,i32.load8_u                   ,(Memargs)
| let v = _ec.get_mem_i32_8u()?;
| _ec.push(v as u32)

0x2e      ,i32.load16_s                  ,(Memargs)
| let v = _ec.get_mem_i32_16s()?;
| _ec.push(v as i32)

0x2f      ,i32.load16_u                  ,(Memargs)
| let v = _ec.get_mem_i32_16u()?;
| _ec.push(v as u32)

0x30      ,i64.load8_s                   ,(Memargs)
| let v = _ec.get_mem_i64_8s()?;
| _ec.push(v as i64)

0x31      ,i64.load8_u                   ,(Memargs)
| let v = _ec.get_mem_i64_8u()?;
| _ec.push(v as i64)

0x32      ,i64.load16_s                  ,(Memargs)
| let v = _ec.get_mem_i64_16s()?;
| _ec.push(v as i64)

0x33      ,i64.load16_u                  ,(Memargs)
| let v = _ec.get_mem_i64_16u()?;
| _ec.push(v as i64)

0x34      ,i64.load32_s                  ,(Memargs)
| let v = _ec.get_mem_i64_32s()?;
| _ec.push(v as i64)

0x35      ,i64.load32_u                  ,(Memargs)
| let v = _ec.get_mem_i64_32u()?;
| _ec.push(v as i64)

0x36      ,i32.store                     ,(Memargs)
| _ec.set_mem_i32()

0x37      ,i64.store                     ,(Memargs)
| _ec.set_mem_i64()

0x38      ,f32.store                     ,(Memargs)
| _ec.set_mem_f32()

0x39      ,f64.store                     ,(Memargs)
| _ec.set_mem_f64()

0x3a      ,i32.store8                    ,(Memargs)
| _ec.set_mem_i32_8()

0x3b      ,i32.store16                   ,(Memargs)
| _ec.set_mem_i32_16()

0x3c      ,i64.store8                    ,(Memargs)
| _ec.set_mem_i64_8()

0x3D      ,i64.store16                   ,(Memargs)
| _ec.set_mem_i64_16()

0x3E      ,i64.store32                   ,(Memargs)
| _ec.set_mem_i64_32()

0x3f      ,memory.size                   ,(MemIndex)
0x40      ,memory.grow                   ,(MemIndex)
0x41      ,i32const                      ,(I32)
| let v = _ec.op_u32()?;
| _ec.push_value(v.into())

0x42      ,i64const                      ,(I64)
0x43      ,f32const                      ,(F32)
0x44      ,f64.const                     ,(F64)
0x45      ,i32.eqz                       ,()
0x46      ,i32.eq                        ,()
0x47      ,i32.ne                        ,()
0x48      ,i32.lt_s                      ,()
0x49      ,i32.lt_u                      ,()
0x4a      ,i32.gt_s                      ,()
0x4b      ,i32.gt_u                      ,()
0x4c      ,i32.le_s                      ,()
0x4d      ,i32.le_u                      ,()
0x4e      ,i32.ge_s                      ,()
0x4f      ,i32.ge_u                      ,()
0x50      ,i64.eqz                       ,()
0x51      ,i64.eq                        ,()
0x52      ,i64.ne                        ,()
0x53      ,i64.lt_s                      ,()
0x54      ,i64.lt_u                      ,()
0x55      ,i64.gt_s                      ,()
0x56      ,i64.gt_u                      ,()
0x57      ,i64.le_s                      ,()
0x58      ,i64.le_u                      ,()
0x59      ,i64.ge_s                      ,()
0x5a      ,i64.ge_u                      ,()
0x5b      ,f32.eq                        ,()
0x5c      ,f32.ne                        ,()
0x5d      ,f32.lt                        ,()
0x5e      ,f32.gt                        ,()
0x5f      ,f32.le                        ,()
0x60      ,f32.ge                        ,()
0x61      ,f64.eq                        ,()
0x62      ,f64.ne                        ,()
0x63      ,f64.lt                        ,()
0x64      ,f64.gt                        ,()
0x65      ,f64.le                        ,()
0x66      ,f64ge                         ,()
0x67      ,i32.clz                       ,()
0x68      ,i32.ctz                       ,()
0x69      ,i32.popcnt                    ,()
0x6a      ,i32.add                       ,()
| let r = _ec.pop::<u32>()?;
| let l = _ec.pop::<u32>()?;
| _ec.push(l + r)

0x6b      ,i32.sub                       ,()
| let r = _ec.pop::<u32>()?;
| let l = _ec.pop::<u32>()?;
| _ec.push(r - l)

0x6c      ,i32.mul                       ,()
0x6d      ,i32.div_s                     ,()
0x6e      ,i32.div_u                     ,()
0x6f      ,i32.rem_s                     ,()
0x70      ,i32.rem_u                     ,()
0x71      ,i32.and                       ,()
0x72      ,i32.or                        ,()
0x73      ,i32.xor                       ,()
0x74      ,i32.shl                       ,()
0x75      ,i32.shr_s                     ,()
0x76      ,i32.shr_u                     ,()
0x77      ,i32.rotl                      ,()
0x78      ,i32.rotr                      ,()
0x79      ,i64.clz                       ,()
0x7a      ,i64.ctz                       ,()
0x7b      ,i64.popcnt                    ,()
0x7c      ,i64.add                       ,()
0x7d      ,i64.sub                       ,()
0x7e      ,i64.mul                       ,()
0x7f      ,i64.divs                      ,()
0x80      ,i64.divu                      ,()
0x81      ,i64.rems                      ,()
0x82      ,i64.remu                      ,()
0x83      ,i64.and                       ,()
0x84      ,i64.or                        ,()
0x85      ,i64.xor                       ,()
0x86      ,i64.shl                       ,()
0x87      ,i64.shrs                      ,()
0x88      ,i64.shru                      ,()
0x89      ,i64.rotl                      ,()
0x8a      ,i64.rotr                      ,()
0x8b      ,f32.abs                       ,()
0x8c      ,f32.neg                       ,()
0x8d      ,f32.ceil                      ,()
0x8e      ,f32.floor                     ,()
0x8f      ,f32.trunc                     ,()
0x90      ,f32.nearest                   ,()
0x91      ,f32.sqrt                      ,()
0x92      ,f32.add                       ,()
0x93      ,f32.sub                       ,()
0x94      ,f32.mul                       ,()
0x95      ,f32.div                       ,()
0x96      ,f32.min                       ,()
0x97      ,f32.max                       ,()
0x98      ,f32.copysign                  ,()
0x99      ,f64.abs                       ,()
0x9a      ,f64.neg                       ,()
0x9b      ,f64.ceil                      ,()
0x9c      ,f64.floor                     ,()
0x9d      ,f64.trunc                     ,()
0x9e      ,f64.nearest                   ,()
0x9f      ,f64.sqrt                      ,()
0xa0      ,f64.add                       ,()
0xa1      ,f64.sub                       ,()
0xa2      ,f64.mul                       ,()
0xa3      ,f64.div                       ,()
0xa4      ,f64.min                       ,()
0xa5      ,f64.max                       ,()
0xa6      ,f64.copysign                  ,()
0xa7      ,i32.wrap_i64                  ,()
0xa8      ,i32.trunc_f32_s               ,()
0xa9      ,i32.trunc_f32_u               ,()
0xaa      ,i32.trunc_f64_s               ,()
0xab      ,i32.trunc_f64_u               ,()
0xac      ,i64.extend_i32_s              ,()
0xad      ,i64.extend_i32_u              ,()
0xae      ,i64.trunc_f32_s               ,()
0xaf      ,i64.trunc_f32_u               ,()
0xb0      ,i64.trunc_f64_s               ,()
0xb1      ,i64.trunc_f64_u               ,()
0xb2      ,f32.convert_i32_s             ,()
0xb3      ,f32.convert_i32_u             ,()
0xb4      ,f32.convert_i64_s             ,()
0xb5      ,f32.convert_i64_u             ,()
0xb6      ,f32.demote_f64                ,()
0xb7      ,f64.convert_i32_s             ,()
0xb8      ,f64.convert_i32_u             ,()
0xb9      ,f64.convert_i64_s             ,()
0xba      ,f64.convert_i64_u             ,()
0xbb      ,f64.promotef32                ,()
0xbc      ,i32.reinterpretf32            ,()
0xbd      ,i64.reinterpretf64            ,()
0xbe      ,f32.reinterpret_i32           ,()
0xbf      ,f64.reinterpret_i64           ,()
0xc0      ,i32.extend8_s                 ,()
0xc1      ,i32.extend16_s                ,()
0xc2      ,i64.extend8_s                 ,()
0xc3      ,i64.extend16_s                ,()
0xc4      ,i64.extend32_s                ,()
0xfc      ,extended                      ,()

